{
  "name": "Rqalpha",
  "tagline": "RQalpha: A Python Algorithmic Trading Engine with BackTest, Portfolio Calculation and Free Day Data",
  "body": "![rqalpha](https://raw.githubusercontent.com/ricequant/rqalpha/master/docs/rqalpha4.jpg)\r\n\r\n# RQAlpha\r\n\r\n## 简介\r\n\r\nRQAlpha是一个开源的Python算法交易和回测引擎，适合A股市场，是事件驱动的设计。自带日线数据, 目前暂时仅支持日线回测。\r\n\r\nRQAlpha的逻辑也将会在[Ricequant](https://www.ricequant.com)的一些回测部分使用，[Ricequant](https://www.ricequant.com)  - 是一个开放的量化算法交易社区，有免费的服务器资源给大家测试、实盘模拟您的交易算法，并且可以将交易信号通过微信和邮件实时推送给大家, 如果您想要更好的回测报告体验和实盘模拟交易功能可以把本地写好的策略复制黏贴到我们的网站上运行。\r\n\r\n如果您想参与和贡献进来这个项目，可以发邮件给 public@ricequant.com 联系，如果您有功能需求或者bug报告的话，都可以开一个issue：https://github.com/ricequant/rqalpha/issues\r\n\r\n## 特色\r\n\r\n- 容易使用：RQAlpha可以让你集中精力在策略的开发上。可以参考./examples 下的范例\r\n- 需要传入历史数据，计算的结果是pandas的DataFrame, 和PyData的生态系统很好的结合在一起\r\n- 可以使用Python的统计、机器学习等科学计算库如matplotlib, scipy, statsmodels和sklearn等\r\n- 免费提供了Ricequant的日级别数据，可以通过互联网自己更新data bundle\r\n- 同时支持Python2.7和Python3\r\n- 目前仅支持A股股票，暂时不支持ETF、分级等数据\r\n\r\n## 安装\r\n\r\n```\r\n# 为了避免一些安装问题，请先升级您的pip和setuptools\r\npip install -U pip setuptools\r\n\r\n# 安装rqalpha\r\npip install rqalpha\r\n\r\n# 升级rqalpha\r\npip install -U rqalpha\r\n\r\n# 国内的用户们可以使用镜像\r\npip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com -U rqalpha\r\n```\r\n\r\n### For Windows用户\r\n如果出现缺失`cl.exe`，请访问[https://wiki.python.org/moin/WindowsCompilers](https://wiki.python.org/moin/WindowsCompilers)下载VC并且安装。\r\n\r\n如果在安装`bcolz`出现编译困难，可以从[http://www.lfd.uci.edu/~gohlke/pythonlibs/#bcolz](http://www.lfd.uci.edu/~gohlke/pythonlibs/#bcolz)下载`bcolz`安装，安装`bcolz`后，再安装`rqalpha`。\r\n\r\n## 安装依赖\r\n\r\n### 安装TA-Lib\r\n你可以通过PyPI安装：\r\n\r\n```\r\n$ pip install TA-Lib\r\n```\r\n\r\n如果发现无法通过 pip 安装，请访问 [https://mrjbq7.github.io/ta-lib/install.html](https://mrjbq7.github.io/ta-lib/install.html) 解决。\r\n\r\n对于Windows用户，如果编译困难，可以根据您本地的Python版本下载指定版本的whl包，然后`pip install TA_Lib-0.4.9-cp27-none-win_amd64.whl`。\r\n\r\n- [TA_Lib-0.4.9-cp27-none-win32.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp27-none-win32.whl)\r\n- [TA_Lib-0.4.9-cp27-none-win_amd64.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp27-none-win_amd64.whl)\r\n- [TA_Lib-0.4.9-cp34-none-win32.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp34-none-win32.whl)\r\n- [TA_Lib-0.4.9-cp34-none-win_amd64.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp34-none-win_amd64.whl)\r\n- [TA_Lib-0.4.9-cp35-none-win32.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp35-none-win32.whl)\r\n- [TA_Lib-0.4.9-cp35-none-win_amd64.whl](http://www.lfd.uci.edu/~gohlke/pythonlibs/6kbpejrn/TA_Lib-0.4.9-cp35-none-win_amd64.whl)\r\n\r\n## Usage\r\n\r\n```\r\nUsage: rqalpha [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -v, --verbose\r\n  --help         Show this message and exit.\r\n\r\nCommands:\r\n  examples       generate example strategies to target folder\r\n  plot           draw result DataFrame\r\n  run            run strategy from file\r\n  update_bundle  update data bundle, download if not found\r\n```\r\n\r\n### 下载回测需要的数据bundle\r\n运行以下命令，将会从Ricequant的服务器下载最新的日级别数据，为回测提供数据支持。\r\n\r\n```\r\nrqalpha update_bundle\r\n```\r\n\r\n### 生成样例策略\r\n运行以下命令，将会在指定目录生成一个examples文件夹，其中包含几个有趣的样例策略。\r\n\r\n```\r\nrqalpha examples -d ./\r\n```\r\n\r\n### 运行回测\r\n回测脚本参数如下：\r\n\r\n```\r\nUsage: rqalpha run [OPTIONS]\r\n\r\n  run strategy from file\r\n\r\nOptions:\r\n  -f, --strategy-file PATH     [required]\r\n  -s, --start-date DATE        [required]\r\n  -e, --end-date DATE          [required]\r\n  -o, --output-file PATH\r\n  -i, --init-cash INTEGER\r\n  --plot / --no-plot           plot result\r\n  --progress / --no-progress   show progress bar\r\n  -d, --data-bundle-path PATH\r\n  --help                       Show this message and exit.\r\n```\r\n\r\n运行以下命令，将开始回测\r\n\r\n```\r\ncd examples\r\nrqalpha run -f multi_rsi.py -s 2014-01-01 -e 2016-01-01 -o result.pkl --plot\r\n```\r\n\r\n等待回测结束后，将显示您的收益率和Risk。\r\n\r\n![backtest](https://raw.githubusercontent.com/ricequant/rqalpha/master/docs/multi_rsi.png)\r\n\r\n### 绘制回测结果\r\n如果运行完回测后，还需要再次绘制回测结果，可以运行以下命令：\r\n```\r\nrqalpha plot result.pkl\r\n```\r\n\r\n### 分析结果\r\nRQAlpha可以输出一个DataFrame，其中包含了每天的Portfolio信息、Risk信息、Trades和Positions。\r\n\r\n其Index是交易日，columns包括`alpha`, `annualized_returns`, `benchmark_annualized_returns`, `benchmark_daily_returns`, `benchmark_total_returns`, `beta`, `cash`, `daily_returns`, `downside_risk`, `information_rate`, `market_value`, `max_drawdown`, `pnl`, `portfolio_value`, `positions`, `sharpe`, `sortino`, `total_commission`, `total_returns`, `total_tax`, `tracking_error`, `trades`, `volatility`。\r\n\r\n其中`positions`是当日的持仓信息，`trades`是当日的交易信息。\r\n\r\n```python\r\nimport pandas as pd\r\ndf = pd.read_pickle(\"result.pkl\")\r\nprint(df.iloc[-1])\r\n\r\n'''\r\nalpha                                                                   0.0180666\r\nannualized_returns                                                      0.0559331\r\nbenchmark_annualized_returns                                            0.0454542\r\nbenchmark_daily_returns                                               8.87784e-05\r\nbenchmark_total_returns                                                  0.525913\r\nbeta                                                                     0.518371\r\ncash                                                                      4971.44\r\ndaily_returns                                                          0.00250376\r\ndownside_risk                                                            0.246409\r\ninformation_rate                                                        0.0380054\r\nmarket_value                                                               162796\r\nmax_drawdown                                                            -0.602535\r\npnl                                                                           419\r\nportfolio_value                                                            167767\r\npositions                       {'000068.XSHE': Position({{'value_percent': 0....\r\nsharpe                                                                    2.35011\r\nsortino                                                                   2.62967\r\ntotal_commission                                                          2585.89\r\ntotal_returns                                                            0.677674\r\ntotal_tax                                                                 1172.01\r\ntracking_error                                                           0.269138\r\ntrades                                                                         []\r\nvolatility                                                               0.275721\r\nName: 2016-07-01 00:00:00, dtype: object\r\n'''\r\n```\r\n\r\n## 架构图\r\n\r\n![Architecture](https://raw.githubusercontent.com/ricequant/rqalpha/master/docs/QQ20160713-1.jpeg)\r\n\r\n## FAQ\r\n### 在Windows运行报Error on import matplotlib.pyplot\r\n\r\n请访问 [Error on import matplotlib.pyplot (on Anaconda3 for Windows 10 Home 64-bit PC)](http://stackoverflow.com/questions/34004063/error-on-import-matplotlib-pyplot-on-anaconda3-for-windows-10-home-64-bit-pc) 解决。\r\n\r\n## Python SDK 简介\r\n\r\n### Python策略Hello World\r\n\r\n以下的策略是最简单的一个买入并持有平安银行（buy and hold）的展示，非常简单：\r\n\r\n```python\r\n# 可以自己import我们平台支持的第三方python模块，比如pandas、numpy等。\r\n\r\n# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。\r\ndef init(context):\r\n    context.s1 = \"000001.XSHE\"\r\n    # order是否被发送出去\r\n    context.fired = False\r\n\r\n# 你选择的证券的数据更新将会触发此段逻辑，例如日或分钟历史数据切片或者是实时数据切片更新\r\ndef handle_bar(context, bar_dict):\r\n    # 开始编写你的主要的算法逻辑\r\n\r\n    # bar_dict[order_book_id] 可以拿到某个证券的bar信息\r\n    # context.portfolio 可以拿到现在的投资组合状态信息\r\n\r\n    # 使用order_shares(id_or_ins, amount)方法进行落单\r\n\r\n    # TODO: 开始编写你的算法吧！\r\n    if not context.fired:\r\n\t    # order_percent并且传入1代表买入该股票并且使其占有投资组合的100%\r\n        order_percent(context.s1, 1)\r\n        context.fired = True\r\n```\r\n\r\n----\r\n\r\n### 需要实现的方法\r\n\r\n你的算法策略目前必须实现至少两个方法：`init` 和 `handle_bar`，而`before_trading`是可选择实现的方法。\r\n\r\n#### init\r\n\r\n```python\r\ninit(context)\r\n```\r\n\r\n初始化方法 - 在回测和实时模拟交易只会在启动的时候触发一次。你的算法会使用这个方法来设置你需要的各种初始化配置。\r\n`context` 对象将会在你的算法的所有其他的方法之间进行传递以方便你可以拿取到。\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| context | python简单对象 | 将会在整个算法中当做一个全局变量来使用。属性通过点标记（\".\"）来取到。 |\r\n\r\n**返回**\r\nNone\r\n\r\n**范例:**\r\n\r\n```python\r\ndef init(context):\r\n\t# cash_limit的属性是根据用户需求自己定义的，你可以定义无限多种自己随后需要的属性，ricequant的系统默认只是会占用context.portfolio的关键字来调用策略的投资组合信息\r\n\tcontext.cash_limit = 5000\r\n```\r\n\r\n#### handle_bar\r\n\r\n```python\r\nhandle_bar(context, bar_dict)\r\n```\r\n\r\n切片数据的更新会自动触发调用这个方法，如果是日回测则是每日的切片数据（OHLC）会触发调用，分钟回测则会是每分钟的切片数据会调用，那么在实时模拟交易中则是实时每分钟会调用一次。对于切片数据对象你可以看关于[Bar对象](#bar-object)的更详细的信息。\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| context | 和init方法中的context对象一样 | 存储所有策略的自己定义的变量状态或是初始设置。|\r\n| bar_dict | bar dictionary - 存储了关注的证券的bar的一个dict，order_book_id作为key | 所有已‘关注’的股票的切片数据信息都会更新在这个dict里面。 |\r\n\r\n**返回**\r\nNone\r\n\r\n**范例**\r\n\r\n```python\r\ndef handle_bar(context, bar_dict):\r\n\t# put all your algorithm main logic here.\r\n\t# ...\r\n\torder_shares('000001.XSHE', 500)\r\n\t# ...\r\n```\r\n\r\n#### before_trading\r\n\r\n非强制，可选择实现的函数。每天在市场开始前会被调用。**不可以在这个函数中发送订单（即不可以调用`order_xxxx`函数）。**\r\n\r\n```python\r\nbefore_trading(context, bar_dict)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| context | 和init方法中的context对象一样 | 存储所有策略的自己定义的变量状态或是初始设置，也保存了`portfolio`的信息。 |\r\n\r\n**返回**\r\nNone\r\n\r\n**范例**\r\n```python\r\ndef before_trading(context, bar_dict):\r\n    context.stock_list = [\"000001.XSHE\", \"000099.XSHE\"]\r\n\r\n    # 手动更新股票池\r\n    update_universe(context.stock_list)\r\n```\r\n\r\n----\r\n\r\n### Order方法\r\n\r\n你可以在策略中使用下面的几种丰富的落单方法，他们不同的用法可以让你落单的操作十分便捷。我们在交易系统内部提供好了仓位计算，因此你可以非常便利使用一些基于仓位管理上的落单方法，比如`order_percent` 可以让你基于目前的仓位价值进行落单。\r\n\r\n#### order_shares\r\n\r\n落指定**股数**的买/卖单，最常见的落单方式之一。如有需要落单类型当做一个参量传入，如果忽略掉落单类型，那么默认是市价单（market order）。\r\n\r\n```python\r\norder_shares(id_or_ins, amount, style=MarketOrder())\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象-required | order_book_id或symbol或instrument对象 |\r\n| amount | float-required | 需要落单的股数。正数代表买入，负数代表卖出。将会根据一手xx股来向下调整到一手的倍数，比如中国A股就是调整成100股的倍数。 |\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder()</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n- 购买Buy 2000 股的平安银行股票，并以市价单发送\r\n\r\n```python\r\norder_shares('000001.XSHE', 2000)\r\n```\r\n\r\n- 卖出2000股的平安银行股票，并以市价单发送：\r\n\r\n```python\r\norder_shares('000001.XSHE', -2000)\r\n```\r\n\r\n- 购买1000股的平安银行股票，并以限价单发送，价格为￥10：\r\n\r\n```python\r\norder_shares('000001.XSHG', 1000, style=LimitOrder(10))\r\n```\r\n\r\n#### order_lots\r\n\r\n指定手数发送买/卖单。如有需要落单类型当做一个参量传入，如果忽略掉落单类型，那么默认是市价单（market order）。\r\n\r\n```python\r\norder_lots(id_or_ins, amount, style=OrderType)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象-required | order_book_id或symbol或instrument对象 |\r\n| amount | float-required | 多少手的数目。正数表示买入，负数表示卖出 |\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n- 买入20手的平安银行股票，并且发送市价单：\r\n\r\n```python\r\norder_lots('000001.XSHE', 20)\r\n```\r\n\r\n- 买入10手平安银行股票，并且发送限价单，价格为￥10：\r\n\r\n```python\r\norder_lots('000001.XSHE', 10, style=LimitOrder(10))\r\n```\r\n\r\n#### order_value\r\n\r\n使用想要花费的金钱买入/卖出股票，而不是买入/卖出想要的股数，正数代表买入，负数代表卖出。股票的股数总是会被调整成对应的100的倍数（在A中国A股市场1手是100股）。当您提交一个卖单时，该方法代表的意义是您希望通过卖出该股票套现的金额。如果金额超出了您所持有股票的价值，那么您将卖出所有股票。\r\n\r\n```python\r\norder_value(id_or_ins, cash_amount, style=OrderType)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象-required | order_book_id或symbol或instrument对象 |\r\n| cash_amount | float-required | 需要花费现金购买/卖出证券的数目。正数代表买入，负数代表卖出。 |\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder()</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n- 买入价值￥10000的平安银行股票，并以市价单发送。如果现在平安银行股票的价格是￥7.5，那么下面的代码会买入1300股的平安银行，因为少于100股的数目将会被自动删除掉。\r\n\r\n```python\r\norder_value('000001.XSHE', 10000)\r\n```\r\n\r\n- 卖出价值￥10000的现在持有的平安银行：\r\n\r\n```python\r\norder_value('000001.XSHE', -10000)\r\n```\r\n\r\n\r\n#### order_percent\r\n\r\n发送一个等于目前投资组合价值（市场价值和目前现金的总和）一定百分比的买/卖单，正数代表买，负数代表卖。股票的股数总是会被调整成对应的一手的股票数的倍数（1手是100股）。百分比是一个小数，并且小于或等于1（<=100%），0.5表示的是50%\r\n\r\n```python\r\norder_percent(id_or_ins, percent, style=OrderType)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象 -required | order_book_id或symbol或instrument object. |\r\n| percent | float-required | 占有现有的投资组合价值的百分比。正数表示买入，负数表示卖出。|\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder()</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n- 买入等于现有投资组合50%价值的平安银行股票。如果现在平安银行的股价是￥10/股并且现在的投资组合总价值是￥2000，那么将会买入200股的平安银行股票。（不包含交易成本和滑点的损失）\r\n\r\n```python\r\norder_percent('000001.XSHG', 0.5)\r\n```\r\n\r\n#### order_target_value\r\n\r\n买入/卖出并且自动调整该证券的仓位到一个目标价值。如果还没有任何该证券的仓位，那么会买入全部目标价值的证券。如果已经有了该证券的仓位，则会买入/卖出调整该证券的现在仓位和目标仓位的价值差值的数目的证券。\r\n\r\n```python\r\norder_target_value(id_or_ins, cash_amount, style=OrderType)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象-required | order_book_id或symbol或instrument对象. |\r\n| cash_amount | float-required | 最终的该证券的仓位目标价值 |\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder()</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n-  如果现在的投资组合中持有价值￥3000的平安银行股票的仓位并且设置其目标价值为￥10000，以下代码范例会发送价值￥7000的平安银行的买单到市场。（向下调整到最接近每手股数即100的倍数的股数）\r\n\r\n```python\r\norder_target_value('000001.XSHE', 10000)\r\n```\r\n\r\n#### order_target_percent\r\n\r\n买入/卖出证券以自动调整该证券的仓位到占有一个指定的投资组合的目标百分比。\r\n\r\n- 如果投资组合中没有任何该证券的仓位，那么会买入等于现在投资组合总价值的目标百分比的数目的证券。\r\n- 如果投资组合中已经拥有该证券的仓位，那么会买入/卖出目标百分比和现有百分比的差额数目的证券，最终调整该证券的仓位占据投资组合的比例至目标百分比。\r\n\r\n其实我们需要计算一个position_to_adjust (即应该调整的仓位)\r\n```\r\nposition_to_adjust = target_position - current_position\r\n```\r\n\r\n投资组合价值等于所有已有仓位的价值和剩余现金的总和。买/卖单会被下舍入一手股数（A股是100的倍数）的倍数。目标百分比应该是一个小数，并且最大值应该<=1，比如0.5表示50%。\r\n\r\n如果`position_to_adjust` 计算之后是正的，那么会买入该证券，否则会卖出该证券。\r\n\r\n```python\r\norder_target_percent(id_or_ins, percent, style=OrderType)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_ins | str或instrument对象-required | order_book_id或symbol或instrument对象。 |\r\n| percent | float-required | 仓位最终所占投资组合总价值的目标百分比。 |\r\n| style | OrderType-optional | 订单类型，默认是市价单。目前支持的订单类型有：<ul><li>style=MarketOrder()</li><li>style=LimitOrder(<span></span>limit_price)</li></ul> |\r\n\r\n**返回**\r\nint，唯一的order id\r\n\r\n**范例**\r\n\r\n- 如果投资组合中已经有了平安银行股票的仓位，并且占据目前投资组合的10%的价值，那么以下代码会买入平安银行股票最终使其占据投资组合价值的15%：\r\n\r\n```python\r\norder_target_percent('平安银行', 0.15)\r\n```\r\n\r\n#### cancel_order\r\n\r\n取消由order_id代表的限价单。\r\n\r\n```python\r\ncancel_order(order_id)\r\n```\r\n\r\n#### get_order\r\n\r\n通过唯一的order_id拿到对应的订单信息，不过这个订单信息会在`handle_bar`结尾处丢弃掉。\r\n\r\n```python\r\nget_order(order_id)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| order_id | int-required | 订单的唯一标示符 |\r\n\r\n**返回**\r\norder对象，如：\r\n```python\r\n<Order: filled_shares=100.0 quantity=100.0 instrument=<Instrument: order_book_id='000001.XSHE' symbol='平安银行' abbrev_symbol='PAYH' round_lot=100.0 sector_code='Financials' sector_name='金融'>>\r\n```\r\n\r\n#### get_open_orders\r\n\r\n获取一个由order_id到order对象映射的dict，凡在此dict中的order都未被完全成交或取消。\r\n\r\n----\r\n\r\n### 更改context中的预设值\r\n\r\n----\r\n\r\n#### 更改默认基准\r\n\r\n可以在```init```函数中使用：\r\n\r\n```python\r\ndef init(context):\r\n\tcontext.benchmark = \"000001.XSHE\"\r\n```\r\n\r\n上面的代码片段把你的策略的对比参考基准从默认的```csi300```修改成了平安银行。\r\n\r\n----\r\n\r\n#### 开启允许卖空\r\n\r\n默认卖空是不允许的，不过我们提供了API可以开启卖空，不会让您的卖空单被我们的系统拒掉，可以在```init```函数中使用：\r\n\r\n```python\r\ndef init(context):\r\n\tcontext.short_selling_allowed = True\r\n```\r\n\r\n如果您在测试一些诸如统计套利（pair trading）需要允许卖空机制的策略的时候可以开启这一项，不过注意到在中国A股市场卖空股票是一件非常难的事情。\r\n\r\n----\r\n\r\n#### 更改滑点\r\n\r\n可以在```init```函数中使用：\r\n\r\n```python\r\ndef init(context):\r\n\tcontext.slippage = 0.5\r\n```\r\n\r\n注意 ： 其中的数值应为x%中的x， 例子中的0.5=0.5%。\r\n\r\n上面的代码片段把你的策略的滑点更改为了0.5%。\r\n\r\n----\r\n\r\n#### 更改交易费\r\n\r\n可以在```init```函数中使用：\r\n\r\n```python\r\ndef init(context):\r\n\tcontext.commission = 0.02\r\n```\r\n\r\n注意 ： 其中的数值应为x%中的x， 例子中的0.02=0.02%，即万分之2.\r\n\r\n上面的代码片段把你的策略使用的交易费更改为了0.02%。\r\n\r\n----\r\n\r\n### scheduler方法\r\n\r\n如果需要在某个日期、某个时间点运行一个函数，可以在```init```函数中使用```scheduler```, **注意：```scheduler```必须在```init```函数中调用。**\r\n\r\n```python\r\nscheduler.run_daily(function)\r\nscheduler.run_weekly(function, weekday=x,tradingday=t)\r\nscheduler.run_monthly(function, tradingday=t)\r\n```\r\n\r\n#### 定日期运行\r\n\r\n**每天**\r\n\r\n每天运行一次传入的```function```\r\n\r\n```python\r\nscheduler.run_daily(function)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| function | function | 使传入的```function```每日运行 |\r\n\r\n**返回**\r\nNone\r\n\r\n**注意**\r\n1, schedule一定在其对应时间点的handle_bar之后执行。\r\n\r\n**范例**\r\n\r\n以下的范例代码片段是一个非常简单的例子，在每天交易后查询现在```portfolio```中剩下的cash的情况\r\n\r\n```python\r\ndef log_cash(context, bar_dict):\r\n    logger.info(\"Remaning cash: %r\" % context.portfolio.cash)\r\n\r\ndef init(context):\r\n\t#...\r\n\t# 每天运行一次\r\n\tscheduler.run_daily(log_cash)\r\n```\r\n\r\n----\r\n\r\n**每周某天**\r\n\r\n每周在固定的某天运行一下传入的```function```\r\n\r\n```python\r\nscheduler.run_weekly(function, weekday=x, tradingday=t)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| function | function | 使传入的```function```每日交易开始前运行 |\r\n| weekday | int - required | 1：周一，2：周二, ..., 5: 周五 |\r\n| tradingday | int - not required | 范围为\\[-5,1\\],\\[1,5\\] 例：1（-1）：每周（倒数）第一个交易日，n（-n)：每周（倒数）第n个交易日 |\r\n\r\n**返回**\r\nNone\r\n\r\n**注意**\r\n1, ```tradingday```中的负数表示倒数。\r\n\r\n2, ```tradingday```表示交易日。如某周只有四个交易日，则此周的```tradingday=4```与```tradingday=-1```表示同一天\r\n\r\n3, ```weekday```和```tradingday```不能同时使用。\r\n**范例**\r\n\r\n以下的代码片段非常简单，在每周二固定运行打印一下现在的```portfolio```剩余的资金：\r\n\r\n```python\r\ndef log_cash(context, bar_dict):\r\n    logger.info(\"Remaning cash: %r\" % context.portfolio.cash)\r\n\r\ndef init(context):\r\n\t#...\r\n\t# 每周二打印一下剩余资金：\r\n\tscheduler.run_weekly(log_cash, weekday=2)\r\n\r\n\t# 每周第二个交易日打印剩余资金：\r\n\t#scheduler.run_weekly(log_cash, tradingday=2)\r\n```\r\n\r\n----\r\n\r\n**每月某交易日**\r\n\r\n在每月的某个**交易日**运行一次传入的```function```:\r\n\r\n```python\r\nscheduler.run_monthly(function,tradingday=t)\r\n```\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| function | function | 使传入的```function```每日交易开始前运行 |\r\n| tradingday | int - required |范围为\\[-23,1\\], \\[1,23\\] ，如: 1（-1）：每月（倒数）第一个交易日，2（-2）：每月（倒数）第二个交易日, ..., 28（-28）：每月（倒数）第28个交易日 |\r\n\r\n**返回**\r\nNone\r\n\r\n**注意**\r\n1， ```tradingday```的负数表示倒数\r\n\r\n2， ```tradingday```表示交易日，如某月只有三个交易日，则此月的tradingday=3与tradingday=-1表示同一天\r\n\r\n**范例**\r\n以下的代码片段非常简单的展示了每个月第一个交易日的时候我们进行一次计算，这样子会在一些大计算量的运算情况下很有用，加快你的算法运行速度：\r\n\r\n```python\r\ndef heavy_cal(context, bar_dict):\r\n\ti = i + 100\r\n\r\n# 在这个方法中编写任何的初始化逻辑。context对象将会在你的算法策略的任何方法之间做传递。\r\ndef init(context):\r\n\t# 每月的第一个交易日查询以下财务数据，以确保可以拿到最新更新的财务数据信息用来调整仓位\r\n\tscheduler.run_monthly(heavy_cal, tradingday=1)\r\n```\r\n\r\n----\r\n\r\n### 其他方法\r\n\r\n#### update_universe\r\n\r\n```python\r\nupdate_universe(id_or_symbols)\r\n```\r\n\r\n这个方法传入一个或一个列表的```id_or_symbol(s)```作为参数，用以更新现在关注的证券的集合（e.g\r\n.：股票池）。PS：会在下一个bar事件触发时候产生（新的关注的股票池更新）效果。并且update_universe会是覆盖（overwrite）的操作而不是在已有的股票池的基础上进行增量添加。比如已有的股票池为```['000001\r\n.XSHE', '000024.XSHE']```然后调用了```update_universe(['000030.XSHE'])```之后，股票池就会变成```000030\r\n.XSHE```一个股票了，随后的数据更新也只会跟踪```000030.XSHE```这一个股票了。\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_symbols | str或iterable of strings | 单个或一个id_or_symbol(s)列表. |\r\n\r\n**范例**\r\n\r\n下面的代码是将股票池变更为只有2个股票```000001.XSHE```和```000024.XSHE```:\r\n\r\n```python\r\nupdate_universe(['000001.XSHE', '000024.XSHE'])\r\n```\r\n\r\n----\r\n\r\n#### instruments\r\n\r\n```python\r\ninstruments(id_or_symbols)\r\n```\r\n\r\n转换单个string或一个string列表的order_book_id到instrument对象\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| id_or_symbols | str或iterable of strings | 单个或一个列表的order_book_id，中国市场的A股的order_book_ids是类似‘000001.XSHE’的写法 |\r\n\r\n**返回**\r\n\r\n单个或一个列表的<a href=\"/api/python/chn#instrument-object\" target=\"_blank\">instrument对象</a> - 用id_or_symbol请求的。\r\n\r\n**范例**\r\n\r\n- 只得到单个instrument的对象：\r\n```python\r\n[In]instruments('000001.XSHE')\r\n[Out]\r\n<Instrument: industry_name='货币金融服务', listed_date=datetime.datetime(1991, 4, 3, 0, 0), round_lot=100.0, listing=False, abbrev_symbol='PAYH', symbol='平安银行', industry_code='J66', type='CS', sector_code='Financials', sector_name='金融', order_book_id='000001.XSHE'>\r\n```\r\n\r\n- 得到一个列表的instrument对象 - 中国股票：\r\n```python\r\n[In]instruments(['平安银行', '000024.XSHE'])\r\n[Out]\r\n[<Instrument: industry_name='货币金融服务', listed_date=datetime.datetime(1991, 4, 3, 0, 0), round_lot=100.0, listing=False, abbrev_symbol='PAYH', symbol='平安银行', industry_code='J66', type='CS', sector_code='Financials', sector_name='金融', order_book_id='000001.XSHE'>,\r\n<Instrument: industry_name='房地产业', listed_date=datetime.datetime(1993, 6, 7, 0, 0), round_lot=100.0, listing=False, abbrev_symbol='ZSDC', symbol='招商地产', industry_code='K70', type='CS', sector_code='Financials', sector_name='金融', order_book_id='000024.XSHE'>]\r\n```\r\n\r\n----\r\n\r\n#### history\r\n\r\n```python\r\nhistory(bar_count, frequency, field)\r\n```\r\n\r\n`history`函数返回所有已关注证券的历史行情，同时支持**日以及分钟**历史数据。以pandas的[DataFrame](http://pandas.pydata.org/pandas-docs/dev/dsintro.html#dataframe)对象装载为时间序列。\r\n\r\n**注意**：在我们最新加入的可以动态处理调整证券池的功能以后，您并不只能使用`history`函数拿到已经加入证券池的历史数据，您可以拿到所有想要拿的任意的证券的历史数据了。\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| `bar_count` | int-required | 表示回溯的bar的数量 |\r\n| `frequency` | str-required | 表示回溯时以什么样的频率进行。例如\"1d\"或\"1m\"分别表示每日和每分钟 |\r\n| `field` | str-required | 制定返回的DataFrame中以哪个指标作为数据值，可取“open”，“close”，“high”，“low”，“volume”，“last”, \"total_turnover\" - 总成交额 |\r\n\r\n**返回**：\r\n\r\nDataFrame\r\n\r\n**范例：**\r\n\r\n1. 拿取四天的历史数据：\r\n\r\n```python\r\nprint (history(4, '1d', 'close')['000001.XSHE'])\r\n```\r\n\r\n当前日期：2013-01-05\r\n\r\n| 日期 | 收盘价格 |\r\n| --- | --- |\r\n| 2013-01-02 | 12.0 |\r\n| 2013-01-03 | 11.0 |\r\n| 2013-01-04 | 13.0 |\r\n| 2013-01-05 | 11.0 |\r\n\r\n2. 拿取四分钟的历史数据：\r\n\r\n```python\r\nprint(history(4, '1m', 'close')['000001.XSHE'])\r\n```\r\n\r\n当前时间：2014-01-06  09:34:00\r\n\r\n| 日期 | 收盘价格 |\r\n| --- | --- |\r\n| 2014-01-06 09:31 | 8.2569 |\r\n| 2014-01-06 09:32 | 8.2292 |\r\n| 2014-01-06 09:33 | 8.2014 |\r\n| 2014-01-06 09:34 | 8.2083 |\r\n\r\n----\r\n\r\n#### 拿到当前时间\r\n\r\n```python\r\ncontext.now\r\n```\r\n\r\n使用以上的方法就可以在`handle_bar`中拿到当前的bar的时间，比如day bar的话就是那天的时间，minute bar的话就是这一分钟的时间点。\r\n\r\n----\r\n\r\n### Bar对象\r\n\r\nRicequant的后端算法交易系统会处理你的算法中所有关注的证券，我们支持的包括股票、ETF、LOF、分级基金和期货。\r\n它会发送`bar`事件并且将来还可以发送其他的事件给你的算法策略（比如：tick数据）。`bar_dict`是所有的关注的证券的bar数据的一个总集合，你可以在`handle_bar`中拿取到`bar`对象，其中包含了该证券的所有的市场数据信息。\r\n\r\n例如，如果你想拿到平安银行股票'000001.XSHE'的切片数据信息，那么可以使用这段代码`bar_dict['000001.XSHE']`。下面会介绍我们已经支持的`bar`对象的属性：\r\n\r\n同时对`bar`对象我们也支持如下的转换方法：\r\n\r\n```python\r\nmavg(intervals, frequency='day')\r\n```\r\n\r\n可以用来计算某个证券的某段时间的移动平均价格，默认单位是‘天’\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| 间隔 | int | 一段时间间隔，比如：3 |\r\n| 频率 | str | 间隔的频率，默认是“天” |\r\n\r\n```python\r\nvwap(intervals, frequency='day')\r\n```\r\n\r\n可以用来计算某个证券的某段时间的加权平均价格，默认单位是“天”\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| 间隔 | int | 一段时间间隔，比如：3 |\r\n| 频率 | str | 间隔的频率，默认是“天” |\r\n\r\n----\r\n\r\n### Order对象\r\n\r\n在order对象中的属性：\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| `instrument` | instrument对象 | 订单对应的证券的instrument对象 |\r\n| `filled_shares` | float | 该订单已经成交的股数 |\r\n| `quantity` | float | 该订单的所有的股数 |\r\n\r\n----\r\n\r\n### Portfolio对象\r\n\r\n`portfolio`对象包含算法策略的所有的投资组合的信息。在日级别回测中，这表示的是每日收盘以后的投资组合信息。可以使用`context.portfolio`去拿取`portfolio`对象的信息。\r\n\r\n并且有以下的属性：\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| `starting_cash` | float | 回测或实盘交易给算法策略设置的初始资金 |\r\n| `cash` | float | 现在投资组合中剩余的现金 |\r\n| `total_returns` | float | 算法投资组合至今的累积百分比收益率。计算方法是现在的投资组合价值/投资组合的初始资金。投资组合价值包含剩余现金和其市场价值。 |\r\n| `daily_returns` | float | 当前最新一天的每日收益。 |\r\n| `market_value` | float | 投资组合当前的市场价值（未实现/平仓的价值） |\r\n| `portfolio_value` | float | 当前投资组合的总共价值，包含市场价值和剩余现金。 |\r\n| `pnl` | float | 当前投资组合的￥盈亏 |\r\n| `start_date` | DateTime | 策略投资组合的回测/实时模拟交易的开始日期 |\r\n| `annualized_returns` | float | 投资组合的年化收益率 |\r\n| `positions` | Dictionary | 一个包含所有仓位的字典，以id_or_symbol作为键，`position`对象作为值，关于position的更多的信息可以在下面的部分找到。 |\r\n| `dividend_receivable` | float | 投资组合在分红现金收到账面之前的应收分红部分。具体细节在[分红部分](#dividends-splits-header) |\r\n\r\n----\r\n\r\n### Position对象\r\n\r\n`position`对象代表一个证券的仓位信息。可以通过positions字典拿到，例如：如果你的投资组合有平安银行股票（000001.XSHE）的仓位，你可以通过以下代码拿到它的仓位：\r\n\r\n```python\r\ncontext.portfolio.positions['000001.XSHE']\r\n```\r\n\r\n并且`position`对象有以下的属性：\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| `quantity` | int | 未平仓部分的总股数。 |\r\n| `bought_quantity` | int | 该证券的总买入股数，例如：如果你的投资组合并没有任何平安银行的成交，那么平安银行这个股票的仓位就是0. |\r\n| `sold_quantity` | int | 该证券的总卖出股数，例如：如果你的投资组合曾经买入过平安银行股票200股并且卖出过100股，那么这个属性会返回100. |\r\n| `bought_value` | float | 该证券的总买入的价值，等于每一个该证券的买入成交的价格*买入股数的总和。 |\r\n| `sold_value` | float | 该证券的总卖出价值，等于每一个该证券的卖出成交的价格*卖出股数的总和。 |\r\n| `total_orders` | int | 该仓位的总订单的次数。 |\r\n| `total_trades` | int | 该仓位的总成交的次数。 |\r\n| `sellable` | int | 该仓位可卖出股数。T＋1的市场中sellable = 所有持仓-今日买入的仓位。 |\r\n| `average_cost` | float | 获得该持仓的买入均价，计算方法为每次买入的数量做加权平均。 |\r\n| `market_value` | float | 获得该持仓的实时市场价值。 |\r\n| `value_percent` | float | 获得该持仓的实时市场价值在总投资组合价值中所占比例，取值范围[0, 1]。 |\r\n\r\n----\r\n\r\n### Instrument对象\r\n\r\n`Instrument`代表所有的金融证券，例如：可以是股票，ETF，指数和期货合同。\r\n\r\n#### 股票，ETF，指数Instrument对象\r\n\r\n股票，ETF，指数Instrument对象有如下的属性：\r\n\r\n| 参数 | 类型 | 注释 |\r\n| --- | --- | --- |\r\n| `order_book_id` | str | 证券的独特的标识符。 |\r\n| `symbol` | str | 证券的易读的名字。 |\r\n| `abbrev_symbol` | str | 证券的名称缩写，比如：在中国A股就是股票的拼音缩写，‘PAYH’就是平安银行股票的证券名缩写。 |\r\n| `round_lot` | int | 一手是多少股，中国A股一手是100股。 |\r\n| `sector_code` | str | 板块缩写代码，全球通用标准定义。 |\r\n| `sector_name` | str | 以当地语言为标准的板块代码名。 |\r\n| `industry_code` | str | 国民经济行业分类代码。 |\r\n| `industry_name` | str | 国民经济行业分类名称。 |\r\n| `listing` | bool | 该证券是否还在交易所交易。 |\r\n| `listed_date` | DateTime |该证券的上市日期。 |\r\n| `type` | str | 需要使用种类简称，下面的type列表会解释我们目前支持的证券类型：'CS', 'INDX', 'LOF', 'ETF', 'FenjiMu', 'FenjiA', 'FenjiB', 'Future' |\r\n| `board_type` | str | 'MainBoard' - 主板，'GEM' - 创业板 |\r\n\r\n## 开发\r\n```\r\npyvenv venv\r\nsource venv/bin/activate\r\npip install -e .\r\n```\r\n\r\n## 单步调试策略\r\n可以参考wiki，[使用PyCharm进行单步调试](https://github.com/ricequant/rqalpha/wiki/%E4%BD%BF%E7%94%A8PyCharm%E8%BF%9B%E8%A1%8C%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95)。\r\n\r\n## 运行单元测试\r\n```\r\npy.test\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}